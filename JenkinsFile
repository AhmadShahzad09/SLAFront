pipeline {
    agent {
        kubernetes {
            defaultContainer 'jnlp'
            yamlFile 'SLATool/podTemplate.yaml'
        }
    }
    post {
        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'
        }
    }
    options {
        timestamps()
        gitLabConnection('GitLab')
    }
    stages {
        stage('build node-front') {
            steps {
                container('node') {
                    dir('SLATool/slatool-front'){
                        //sh 'mkdir -p $HOME/.m2'
                        //sh 'cp settings.xml $HOME/.m2'
                        sh 'npm install dependency-check -g'
                        sh 'npm install -g sonarqube-scanner@2.9.1'
                        sh 'npm i -g npm-audit-html'
                        sh 'npm install --unsafe-perm node-sass'
                        sh 'npm install --save moment moment-timezone'
                        sh 'npm run build'
                        sh 'npm run prod'
                    }
                }
            }
        }
        /*stage('nexus') {
            steps {
                container('node') {
                    dir('SLATool/slatool-front'){
                        script {
                            def packageJson = readJSON file: 'package.json'

                            sh 'mkdir npm'
                            sh 'cp -rf package.json npm/package.json'
                            sh 'cp -rf README.md npm/README.md'
                            //sh 'cp -rf lib/ npm/lib/'
                            sh 'mkdir -p npm/lib'
                            sh 'cp -rf icon.json npm/lib/'
                            sh 'mkdir -p npm/packages/theme-onesait/src'
                            sh 'cp -rf src/components/theme-onesait/* npm/packages/theme-onesait/src'
                            sh 'rm -rf npm/packages/theme-onesait/src/ThemeOnesait.vue'

                            if ( packageJson.version.contains('beta') ) {
                                sh 'npm publish npm --tag beta'
                            }
                            else {
                                sh 'npm publish npm'
                            }
                        }
                    }
                }
            }
        }*/
        stage('deliver') {
            stages {
                stage('build-image') {
                    steps {
                        container('dockersla') {
							dir('SLATool/slatool-front'){
								script {
								    def packageJson = readJSON file: 'package.json'
								    img = docker.build("docksdtr.indra.es/addcmn-10.3/slatool/sla_front:${packageJson.version}", "-f DockerfileProd .")
								}
							}
                        }
                    }
                }
                stage('deliver-image') {
		 			steps {
		 				container('dockersla') {
		 					script {
		 						docker.withRegistry('https://docksdtr.indra.es', 'oumsupport') {
		 						    img.push()
		 						}
		 					}
		 				}
		 			}
		 	    }
            }
        }
    }
}
